datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String?
  googleId      String?        @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  roomsCreated  Room[]        @relation("RoomCreator")
  participations RoomParticipant[]
  scores        Score[]
  quizzesCreated Quiz[]
}

model Room {
  id            String         @id @default(uuid())
  code          String         @unique // For easy room joining
  name          String
  status        RoomStatus     @default(WAITING)
  createdAt     DateTime       @default(now())
  startedAt     DateTime?
  endedAt       DateTime?
  creatorId     String
  creator       User           @relation("RoomCreator", fields: [creatorId], references: [id])
  participants  RoomParticipant[]
  quiz          Quiz           @relation(fields: [quizId], references: [id])
  quizId        String
}

model RoomParticipant {
  id            String         @id @default(uuid())
  userId        String
  roomId        String
  joinedAt      DateTime       @default(now())
  user          User           @relation(fields: [userId], references: [id])
  room          Room           @relation(fields: [roomId], references: [id])
  score         Score?

  @@unique([userId, roomId])
}

model Quiz {
  id            String         @id @default(uuid())
  title         String
  description   String?
  questions     Question[]
  rooms         Room[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  creatorId     String
  creator       User           @relation(fields: [creatorId], references: [id])
}

model Question {
  id            String         @id @default(uuid())
  quizId        String
  quiz          Quiz           @relation(fields: [quizId], references: [id])
  text          String
  options       String[]
  correctAnswer Int
  timeLimit     Int           @default(30) // Time limit in seconds
  points        Int           @default(100)
  order         Int
}

model Score {
  id                String         @id @default(uuid())
  userId           String
  user             User           @relation(fields: [userId], references: [id])
  participantId    String         @unique
  participant      RoomParticipant @relation(fields: [participantId], references: [id])
  score            Int            @default(0)
  answeredCount    Int            @default(0)
  correctCount     Int            @default(0)
}

enum RoomStatus {
  WAITING
  IN_PROGRESS
  FINISHED
}